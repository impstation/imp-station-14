using Content.Client.Lobby;
using Content.Client.Options.UI;
using Content.Shared._VDS.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Shared.Configuration;
using Robust.Shared.Network;

namespace Content.Client._VDS.Options.UI;

public sealed partial class OptionOOCColorSlider : BaseOptionCVar<string>
{
    private readonly IConfigurationManager _cfg = default!;
    private readonly CVarDef<string> _cVar = default!;
    private readonly OptionColorSlider _slider;
    private readonly INetManager _netManager = default!;
    private readonly IClientPreferencesManager _preferencesManager = default!;
    protected override string Value
    {
        get => _slider.Slider.Color.ToHex();
        set
        {
            _slider.Slider.Color = Color.FromHex(value);
            UpdateLabelColor();

        }
    }
    public OptionOOCColorSlider(
        OptionsTabControlRow controller,
        IConfigurationManager cfg,
        CVarDef<string> cVar,
        OptionColorSlider slider) :base(controller, cfg, cVar)
    {
        _slider = slider;

        slider.Slider.OnColorChanged += _ =>
        {
            ValueChanged();
            UpdateLabelColor();
        };


    }
    public override void SaveValue()
    {
        base.SaveValue();
        if (_preferencesManager is not { Preferences: not null, ServerDataLoaded: true })
            return;
        _cfg.SetCVar(_cVar, Value);
        UpdateServerColor();
    }
    private void UpdateLabelColor()
    {
        _slider.ExampleLabel.FontColorOverride = Color.FromHex(Value);
    }
    private void UpdateServerColor()
    {
        var oocColor = Value;
        var msg = new MsgUpdateOOCColor
        {
            OOCColor = oocColor,
        };
        _netManager.ClientSendMessage(msg);
    }
}

