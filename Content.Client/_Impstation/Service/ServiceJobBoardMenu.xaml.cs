using Content.Client.UserInterface.Controls;
using Content.Shared._Impstation.Service;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Impstation.Service;

[GenerateTypedNameReferences]
public sealed partial class ServiceJobBoardMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public Action<string>? OnSelectButtonPressed;

    public ServiceJobBoardMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void Update(ServiceJobBoardConsoleState state)
    {
        CurrentJobContainer.Children.Clear();

        // available jobs are generated by the station
        foreach (var job in state.AvailableJobs)
        {
            var entry = new ServiceJobEntry(_prototypeManager.Index(job), _entityManager);
            entry.OnSelectButtonPressed += () => OnSelectButtonPressed?.Invoke(job);

            entry.Disabled = state.ActiveJob != null;
            entry.Selected = state.ActiveJob == job;

            // TODO: show time remaining?

            CurrentJobContainer.AddChild(entry);
        }
    }
}
