using Content.Client.Message;
using Content.Shared._Impstation.CosmicCult.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Impstation.CosmicCult.UI.Monument;
// Content.Client/_Impstation/CosmicCult/UI/Monument/InfluenceUIBox.xaml.cs
[GenerateTypedNameReferences]
public sealed partial class InfluenceUIBox : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly SpriteSystem _sprite;

    public Action? OnGainButtonPressed;

    public InfluenceUIBox(InfluencePrototype influenceProto, bool enabled)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entityManager.System<SpriteSystem>();

        InfluenceIcon.Texture = _sprite.Frame0(influenceProto.Icon);
        Name.Text = Loc.GetString(influenceProto.Name);

        // Special coloring and names if its locked vs unlocked.
        if (enabled)
        {
            Status.Text = Loc.GetString("monument-interface-influences-unlocked");
            GainButton.Disabled = false;
        }
        else
        {
            Status.Text = Loc.GetString("monument-interface-influences-locked");
            GainButton.Disabled = true;
            InfluenceBox.Modulate = Color.Gray;
            Cost.Modulate = Color.Gray;
            InfluenceIcon.Modulate = Color.Gray;
            Name.FontColorOverride = Color.LightGray;
        }

        Type.Text = Loc.GetString(influenceProto.InfluenceType);
        Cost.Text = influenceProto.Cost.ToString();
        Description.SetMarkup(Loc.GetString(influenceProto.Description));

        // This basically does nothing, but it allows the actual menu to "subscribe" to this getting pressed.
        // Elements are private so you have to do it this way.
        GainButton.OnPressed += _ => OnGainButtonPressed?.Invoke();
    }
}
