using Content.Client.UserInterface.Controls;
using Content.Shared._Impstation.StrangeMoods;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Impstation.StrangeMoods.Eui;

[GenerateTypedNameReferences]
public sealed partial class StrangeMoodUi : FancyWindow
{
    public event Action? OnSave;

    private List<StrangeMood> _moods = [];
    private bool _shouldFollowShared;

    public StrangeMoodUi()
    {
        RobustXamlLoader.Load(this);
        NewMoodButton.OnPressed += _ => AddNewMood();
        SaveButton.OnPressed += _ => OnSave?.Invoke();

        ToggleSharedMoodButton.OnToggled += _ =>
        {
            _shouldFollowShared = !_shouldFollowShared;
        };
    }

    private void AddNewMood()
    {
        MoodContainer.AddChild(new MoodContainer());
    }

    public List<StrangeMood> GetMoods()
    {
        var newMoods = new List<StrangeMood>();

        foreach (var control in MoodContainer.Children)
        {
            if (control is not MoodContainer moodControl)
                continue;

            var title = moodControl.MoodTitle;
            if (string.IsNullOrWhiteSpace(title))
                continue;

            var moodText = moodControl.MoodText;
            if (string.IsNullOrWhiteSpace(moodText))
                continue;

            var mood = new StrangeMood()
            {
                MoodName = title,
                MoodDesc = moodText,
            };

            newMoods.Add(mood);
        }

        return newMoods;
    }

    public bool ShouldFollowShared()
    {
        return _shouldFollowShared;
    }

    public void SetFollowShared(bool value)
    {
        _shouldFollowShared = value;
        ToggleSharedMoodButton.Pressed = value;
    }

    private void MoveUp(int index)
    {
        if (index <= 0)
            return;

        (_moods[index], _moods[index - 1]) = (_moods[index - 1], _moods[index]);
        SetMoods(_moods);
    }

    private void MoveDown(int index)
    {
        if (index >= _moods.Count - 1)
            return;

        (_moods[index], _moods[index + 1]) = (_moods[index + 1], _moods[index]);
        SetMoods(_moods);
    }

    private void Delete(int index)
    {
        _moods.RemoveAt(index);

        SetMoods(_moods);
    }

    public void SetMoods(List<StrangeMood> moods)
    {
        _moods = moods;
        MoodContainer.RemoveAllChildren();

        for (var i = 0; i < moods.Count; i++)
        {
            var index = i; // Copy for the closures
            var moodControl = new MoodContainer(moods[i]);
            moodControl.OnMoveUp += () => MoveUp(index);
            moodControl.OnMoveDown += () => MoveDown(index);
            moodControl.OnDelete += () => Delete(index);
            MoodContainer.AddChild(moodControl);
        }
    }
}
