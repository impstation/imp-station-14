uniform highp vec4 colour;

uniform sampler2D noise_0;
uniform sampler2D noise_1;
uniform sampler2D noise_2;

const highp float tileSize = 32.0;

void fragment() {

	highp float multiple = (1.0 / tileSize);
	highp vec2 rem = vec2(mod(UV.x, multiple), mod(UV.y, multiple));
	highp vec2 rounded = UV - rem; //downsample to a 32 * 32 grid for stylistic consistency

	COLOR = 0.25 * texture(noise_0, loopVec(vec2(rounded.x + 0.2 + TIME * 0.2, rounded.y)));
	COLOR += 0.25 * texture(noise_0, loopVec(vec2(rounded.x + 0.5 - TIME * 0.2, rounded.y)));
	COLOR += 0.25 * texture(noise_0, loopVec(vec2(rounded.x, rounded.y + 0.1 - TIME * 0.2)));
	COLOR += 0.25 * texture(noise_0, loopVec(vec2(rounded.x, rounded.y + 0.7 + TIME * 0.2)));

    highp vec3 asHSV = rgb2hsv(COLOR.rgb);
    asHSV.y += sin(TIME) * 0.25;
    asHSV.z *= 1.0 + (COLOR.a * COLOR.a * COLOR.a * COLOR.a); //todo need to figure out a way to make brighter spots much brighter while keeping darker spots dark?
	COLOR = vec4(hsv2rgb(asHSV), COLOR.a);
}

//this produces really fucking wierd results if you just look at the ouput but it apparently works?
highp vec3 rgb2hsv(highp vec3 c) {
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    highp float e = 0.00000000010; //because this doesn't support doing 1.0e-10
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

highp vec3 hsv2rgb(highp vec3 c) {
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

/*
highp vec4 rgb2hsv(highp vec4 rgb) {

    highp float maxVal = max(rgb.r, max(rgb.g, rgb.b));
    highp float minVal = min(rgb.r, min(rgb.g, rgb.b));
    highp float c = maxVal - minVal;

    highp float f = 0.0;
    highp float h = 0.0;
    if (c != 0) {
        if (maxVal == rgb.r) {
            h = mod((rgb.g - rgb.b) / c, 0.6);
            if (h > 0.0) {
                h += 6.0;
            }
        } else if (maxVal == rgb.g) {
            h = (rgb.b - rgb.r) / c + 2.0;
        } else if (maxVal == rgb.b) {
            h = (rgb.r - rgb.g) / c + 4.0;
        }
    }

    highp float hue = h * 60.0 / 360.0;

    highp float saturation = 0.0;
    if (maxVal != 0.0) {
        saturation = c / maxVal;
    }

    return vec4(hue, saturation, maxVal, rgb.a);
}

//aaeugh! why does this work in a web editor but not in-game! I'm going to go insane!
highp vec4 hsv2rgb(highp vec4 hsv) {

    highp float i = floor(hsv.x * 6.0);
    highp float f = hsv.x * 6.0 - i;
    highp float p = hsv.z * (1.0 - hsv.y);
    highp float q = hsv.z * (1.0 - f * hsv.y);
    highp float t = hsv.z * (1.0 - (1.0 - f) * hsv.y);

    highp vec3 rgb = vec3(0.0);

    if (0.0 <= i && i < 1.0) {
        rgb.r = hsv.z;
        rgb.g = t;
        rgb.b = p;
    } else if (1.0 <= i && i < 2.0) {
        rgb.r = q;
        rgb.g = hsv.z;
        rgb.b = p;
    } else if (2.0 <= i && i < 3.0) {
        rgb.r = p;
        rgb.g = hsv.z;
        rgb.b = t;
    } else if (3.0 <= i && i < 4.0) {
        rgb.r = p;
        rgb.g = q;
        rgb.b = hsv.z;
    } else if (4.0 <= i && i < 5.0) {
        rgb.r = t;
        rgb.g = p;
        rgb.b = hsv.z;
    } else if (5.0 <= i && i < 6.0) {
        rgb.r = hsv.z;
        rgb.g = p;
        rgb.b = q;
    }

/*
    highp float hue = (hsv.x - trunc(hsv.x)) * 360.0;
    highp float saturation = hsv.y;
    highp float value = hsv.z;

    highp float c = value * saturation;
    highp float h = hue / 60.0;
    highp float x = 1.0 - abs(mod(h, 2.0) - 1.0);

    highp vec3 rgb = vec3(0.0);

    if (0.0 <= h && h < 1.0) {
        rgb.r = c;
        rgb.g = x;
        rgb.b = 0.0;
    } else if (1.0 <= h && h < 2.0) {
        rgb.r = x;
        rgb.g = c;
        rgb.b = 0.0;
    } else if (2.0 <= h && h < 3.0) {
        rgb.r = 0.0;
        rgb.g = c;
        rgb.b = x;
    } else if (3.0 <= h && h < 4.0) {
        rgb.r = 0.0;
        rgb.g = x;
        rgb.b = c;
    } else if (4.0 <= h && h < 5.0) {
        rgb.r = x;
        rgb.g = 0.0;
        rgb.b = c;
    } else if (5.0 <= h && h < 6.0) {
        rgb.r = c;
        rgb.g = 0.0;
        rgb.b = x;
    }
*/

    return vec4(rgb, hsv.a);
}
*/

//hate that I have to do this because we can't just set the loop behaviour on the texture
highp vec2 loopVec(highp vec2 toLoop) {
    return vec2(abs(mod(toLoop.x, 1)), abs(mod(toLoop.y, 1)));
}

//copied out from an error.glsl file so that I can actually edit these
//g because gas :)
highp vec2 gRandom(highp vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

highp float gNoise(highp vec2 uv) {

    highp vec2 uv_index = floor(uv);
    highp vec2 uv_fract = fract(uv);

    highp vec2 blur = uv_fract * uv_fract * (3.0 - 2.0 * uv_fract);

    return mix( mix( dot( gRandom(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( gRandom(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( gRandom(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( gRandom(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

