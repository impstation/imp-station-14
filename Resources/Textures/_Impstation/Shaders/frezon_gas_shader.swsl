uniform highp vec4 colour;

uniform sampler2D noise_0;
uniform sampler2D noise_1;
uniform sampler2D noise_2;

const highp float tileSize = 32.0;

void fragment() {

	highp float multiple = (1.0 / tileSize);
	highp vec2 rem = vec2(mod(UV.x, multiple), mod(UV.y, multiple));
	highp vec2 rounded = UV - rem; //downsample to a 32 * 32 grid for stylistic consistency

    //note to self if I want to change things back - was .4, .2, .2, .2
	COLOR = 0.25 * texture(noise_0, loopVec(vec2(rounded.x + sin(rounded.y * 4.0 + TIME * 0.1), rounded.y + sin(rounded.x * 4.0 + TIME * 0.1))));
	COLOR += 0.25 * texture(noise_0, loopVec(vec2(rounded.x + sin(rounded.y * 4.0 + TIME * 0.1), rounded.y)));
	COLOR += 0.25 * texture(noise_0, loopVec(vec2(rounded.x, rounded.y + sin(rounded.x * 4.0 + TIME * 0.1))));
	COLOR += 0.25 * texture(noise_2, loopVec(vec2(rounded.x, rounded.y + TIME * 0.2)));
	COLOR *= colour;
	highp vec3 asHSV = rgb2hsv(COLOR.rgb);
	COLOR.rgb = hsv2rgb(asHSV + vec3(0.0, 0.0, asHSV.z * asHSV.z));
}

//hate that I have to do this because we can't just set the loop behaviour on the texture
highp vec2 loopVec(highp vec2 toLoop) {
    return abs(mod(toLoop, 1));
}

highp vec3 rgb2hsv(highp vec3 c) {
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    highp float e = 0.00000000010; //because this doesn't support doing 1.0e-10
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

highp vec3 hsv2rgb(highp vec3 c) {
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

//copied out from an error.glsl file so that I can actually edit these
//g because gas :)
highp vec2 gRandom(highp vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

highp float gNoise(highp vec2 uv) {

    highp vec2 uv_index = floor(uv);
    highp vec2 uv_fract = fract(uv);

    highp vec2 blur = uv_fract * uv_fract * (3.0 - 2.0 * uv_fract);

    return mix( mix( dot( gRandom(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( gRandom(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( gRandom(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( gRandom(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

