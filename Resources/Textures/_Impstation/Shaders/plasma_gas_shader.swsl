uniform highp vec4 colour;

uniform sampler2D noise_0;
uniform sampler2D noise_1;
uniform sampler2D noise_2;

const highp float tileSize = 32.0;

void fragment() {

	highp vec2 rounded = quantiseVecDown(UV, tileSize); //downsample to a 32 * 32 grid for stylistic consistency

	COLOR = 0.4 * texture(noise_0, loopVec(vec2(rounded.x + sin(rounded.y * 4.0 + TIME * 0.1), rounded.y)));
	COLOR += 0.3 * texture(noise_1, loopVec(rounded - TIME * 0.1));
	COLOR += 0.3 * texture(noise_2, loopVec(rounded + 0.3)); //tiny offset so it's not identical to other gases
	COLOR *= colour;
}

highp vec2 quantiseVecDown(highp vec2 v, highp float divisions) {
    highp float multiple = 1.0 / divisions;
    highp vec2 rem = mod(v, multiple);
    return v - rem;
}

//hate that I have to do this because we can't just set the loop behaviour on the texture
highp vec2 loopVec(highp vec2 toLoop) {
    return abs(mod(toLoop, 1));
}
